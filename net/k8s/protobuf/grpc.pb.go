// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pb "github.com/hiank/think/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600)
}

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 92 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85,
	0x70, 0x8d, 0x9c, 0xb9, 0x58, 0x02, 0x32, 0x0b, 0x52, 0x85, 0xe4, 0xb8, 0x58, 0x7c, 0x32, 0xf3,
	0xb2, 0x85, 0x38, 0xf4, 0x7c, 0x21, 0xf2, 0x52, 0x70, 0x96, 0x06, 0xa3, 0x01, 0xa3, 0x90, 0x34,
	0x17, 0xab, 0x4b, 0x7e, 0x5e, 0x72, 0x2a, 0x36, 0x05, 0x49, 0x6c, 0x60, 0xb3, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x34, 0xd4, 0xb4, 0xfd, 0x68, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PipeClient is the client API for Pipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (Pipe_LinkClient, error)
	Donce(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error)
}

type pipeClient struct {
	cc grpc.ClientConnInterface
}

func NewPipeClient(cc grpc.ClientConnInterface) PipeClient {
	return &pipeClient{cc}
}

func (c *pipeClient) Link(ctx context.Context, opts ...grpc.CallOption) (Pipe_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pipe_serviceDesc.Streams[0], "/Pipe/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeLinkClient{stream}
	return x, nil
}

type Pipe_LinkClient interface {
	Send(*pb.Message) error
	Recv() (*pb.Message, error)
	grpc.ClientStream
}

type pipeLinkClient struct {
	grpc.ClientStream
}

func (x *pipeLinkClient) Send(m *pb.Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipeLinkClient) Recv() (*pb.Message, error) {
	m := new(pb.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipeClient) Donce(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error) {
	out := new(pb.Message)
	err := c.cc.Invoke(ctx, "/Pipe/Donce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipeServer is the server API for Pipe service.
type PipeServer interface {
	Link(Pipe_LinkServer) error
	Donce(context.Context, *pb.Message) (*pb.Message, error)
}

// UnimplementedPipeServer can be embedded to have forward compatible implementations.
type UnimplementedPipeServer struct {
}

func (*UnimplementedPipeServer) Link(srv Pipe_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (*UnimplementedPipeServer) Donce(ctx context.Context, req *pb.Message) (*pb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donce not implemented")
}

func RegisterPipeServer(s *grpc.Server, srv PipeServer) {
	s.RegisterService(&_Pipe_serviceDesc, srv)
}

func _Pipe_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServer).Link(&pipeLinkServer{stream})
}

type Pipe_LinkServer interface {
	Send(*pb.Message) error
	Recv() (*pb.Message, error)
	grpc.ServerStream
}

type pipeLinkServer struct {
	grpc.ServerStream
}

func (x *pipeLinkServer) Send(m *pb.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipeLinkServer) Recv() (*pb.Message, error) {
	m := new(pb.Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pipe_Donce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).Donce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pipe/Donce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).Donce(ctx, req.(*pb.Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pipe",
	HandlerType: (*PipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Donce",
			Handler:    _Pipe_Donce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _Pipe_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
