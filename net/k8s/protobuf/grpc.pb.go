// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/hiank/think/net/k8s/protobuf/grpc.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pb "github.com/hiank/think/pb"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_5846058a2ff09175, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Void)(nil), "Void")
}

func init() {
	proto.RegisterFile("github.com/hiank/think/net/k8s/protobuf/grpc.proto", fileDescriptor_5846058a2ff09175)
}

var fileDescriptor_5846058a2ff09175 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc8, 0x4c, 0xcc, 0xcb, 0xd6, 0x2f, 0xc9, 0xc8,
	0xcc, 0xcb, 0xd6, 0xcf, 0x4b, 0x2d, 0xd1, 0xcf, 0xb6, 0x28, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9,
	0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x03, 0xf3, 0xa4, 0x78, 0x73, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x53, 0x21, 0x5c, 0x25, 0x36, 0x2e, 0x96, 0xb0, 0xfc, 0xcc, 0x14, 0xa3, 0x28,
	0x2e, 0x96, 0x80, 0xcc, 0x82, 0x54, 0x21, 0x39, 0x2e, 0x16, 0x9f, 0xcc, 0xbc, 0x6c, 0x21, 0x0e,
	0x3d, 0x5f, 0x88, 0x3a, 0x29, 0x38, 0x4b, 0x83, 0xd1, 0x80, 0x51, 0x48, 0x92, 0x8b, 0xd9, 0x3d,
	0xb5, 0x04, 0x9b, 0xb4, 0x90, 0x38, 0x17, 0x4b, 0x40, 0x7e, 0x31, 0xb2, 0x1c, 0xab, 0x1e, 0xc8,
	0xec, 0x24, 0x36, 0xb0, 0x55, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x1b, 0xd6, 0x9f,
	0xaf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipeClient is the client API for Pipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (Pipe_LinkClient, error)
	Get(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error)
	Post(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*Void, error)
}

type pipeClient struct {
	cc *grpc.ClientConn
}

func NewPipeClient(cc *grpc.ClientConn) PipeClient {
	return &pipeClient{cc}
}

func (c *pipeClient) Link(ctx context.Context, opts ...grpc.CallOption) (Pipe_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pipe_serviceDesc.Streams[0], "/Pipe/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeLinkClient{stream}
	return x, nil
}

type Pipe_LinkClient interface {
	Send(*pb.Message) error
	Recv() (*pb.Message, error)
	grpc.ClientStream
}

type pipeLinkClient struct {
	grpc.ClientStream
}

func (x *pipeLinkClient) Send(m *pb.Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipeLinkClient) Recv() (*pb.Message, error) {
	m := new(pb.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipeClient) Get(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error) {
	out := new(pb.Message)
	err := c.cc.Invoke(ctx, "/Pipe/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeClient) Post(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Pipe/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipeServer is the server API for Pipe service.
type PipeServer interface {
	Link(Pipe_LinkServer) error
	Get(context.Context, *pb.Message) (*pb.Message, error)
	Post(context.Context, *pb.Message) (*Void, error)
}

func RegisterPipeServer(s *grpc.Server, srv PipeServer) {
	s.RegisterService(&_Pipe_serviceDesc, srv)
}

func _Pipe_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServer).Link(&pipeLinkServer{stream})
}

type Pipe_LinkServer interface {
	Send(*pb.Message) error
	Recv() (*pb.Message, error)
	grpc.ServerStream
}

type pipeLinkServer struct {
	grpc.ServerStream
}

func (x *pipeLinkServer) Send(m *pb.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipeLinkServer) Recv() (*pb.Message, error) {
	m := new(pb.Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pipe_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pipe/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).Get(ctx, req.(*pb.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipe_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pipe/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).Post(ctx, req.(*pb.Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pipe",
	HandlerType: (*PipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Pipe_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Pipe_Post_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _Pipe_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/hiank/think/net/k8s/protobuf/grpc.proto",
}
