// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Request) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type Response struct {
	Tokens               [][]byte `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetTokens() [][]byte {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Response) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8e, 0xb1, 0x0e, 0x82, 0x30,
	0x10, 0x40, 0x53, 0x45, 0xc4, 0x93, 0xa9, 0x21, 0x06, 0x59, 0x24, 0x2c, 0x76, 0x2a, 0x06, 0xbf,
	0xc0, 0xd1, 0xc4, 0xc1, 0x34, 0xfe, 0x40, 0xd1, 0x93, 0x18, 0x4d, 0x5b, 0x69, 0x19, 0xf8, 0x7b,
	0x93, 0x02, 0xbb, 0xe3, 0xcb, 0xdd, 0x7b, 0x77, 0x00, 0x4d, 0x6b, 0xee, 0xdc, 0xb4, 0xda, 0xe9,
	0x6c, 0xdb, 0x68, 0xdd, 0x7c, 0xb0, 0xf4, 0x54, 0x77, 0xcf, 0x52, 0xaa, 0x7e, 0x18, 0x15, 0x67,
	0x58, 0x0a, 0xfc, 0x76, 0x68, 0x1d, 0x4d, 0x60, 0xe1, 0xf4, 0x1b, 0x55, 0x4a, 0x72, 0xc2, 0x62,
	0x31, 0x00, 0x65, 0x10, 0x3c, 0xa4, 0x93, 0xe9, 0x2c, 0x27, 0x6c, 0x5d, 0x25, 0x7c, 0x48, 0xf1,
	0x29, 0xc5, 0x4f, 0xaa, 0x17, 0x7e, 0xa3, 0xb8, 0x40, 0x24, 0xd0, 0x1a, 0xad, 0x2c, 0xd2, 0x0d,
	0x84, 0x5e, 0xb7, 0x29, 0xc9, 0xe7, 0x2c, 0x16, 0x23, 0xfd, 0x5f, 0xab, 0xf6, 0x10, 0x5c, 0x5f,
	0x06, 0xe9, 0x0e, 0x82, 0x5b, 0x2b, 0x15, 0x8d, 0xf8, 0xf8, 0x67, 0xb6, 0xe2, 0xd3, 0x19, 0x46,
	0x0e, 0xa4, 0x0e, 0xbd, 0x7c, 0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x99, 0x8c, 0x4d, 0xf1,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipeClient is the client API for Pipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeClient interface {
	Tran(ctx context.Context, opts ...grpc.CallOption) (Pipe_TranClient, error)
}

type pipeClient struct {
	cc *grpc.ClientConn
}

func NewPipeClient(cc *grpc.ClientConn) PipeClient {
	return &pipeClient{cc}
}

func (c *pipeClient) Tran(ctx context.Context, opts ...grpc.CallOption) (Pipe_TranClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pipe_serviceDesc.Streams[0], "/Pipe/Tran", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeTranClient{stream}
	return x, nil
}

type Pipe_TranClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type pipeTranClient struct {
	grpc.ClientStream
}

func (x *pipeTranClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipeTranClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipeServer is the server API for Pipe service.
type PipeServer interface {
	Tran(Pipe_TranServer) error
}

func RegisterPipeServer(s *grpc.Server, srv PipeServer) {
	s.RegisterService(&_Pipe_serviceDesc, srv)
}

func _Pipe_Tran_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServer).Tran(&pipeTranServer{stream})
}

type Pipe_TranServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type pipeTranServer struct {
	grpc.ServerStream
}

func (x *pipeTranServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipeTranServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Pipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pipe",
	HandlerType: (*PipeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tran",
			Handler:       _Pipe_Tran_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
