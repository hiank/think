// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: pipe.proto

package pipe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pipe_proto protoreflect.FileDescriptor

var file_pipe_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0x6f, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x12,
	0x34, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x43, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x69, 0x61, 0x6e, 0x6b, 0x2f, 0x74,
	0x68, 0x69, 0x6e, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_pipe_proto_goTypes = []interface{}{
	(*anypb.Any)(nil),     // 0: google.protobuf.Any
	(*emptypb.Empty)(nil), // 1: google.protobuf.Empty
}
var file_pipe_proto_depIdxs = []int32{
	0, // 0: Rest.Get:input_type -> google.protobuf.Any
	0, // 1: Rest.Post:input_type -> google.protobuf.Any
	0, // 2: Keepalive.Link:input_type -> google.protobuf.Any
	0, // 3: Rest.Get:output_type -> google.protobuf.Any
	1, // 4: Rest.Post:output_type -> google.protobuf.Empty
	0, // 5: Keepalive.Link:output_type -> google.protobuf.Any
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pipe_proto_init() }
func file_pipe_proto_init() {
	if File_pipe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pipe_proto_goTypes,
		DependencyIndexes: file_pipe_proto_depIdxs,
	}.Build()
	File_pipe_proto = out.File
	file_pipe_proto_rawDesc = nil
	file_pipe_proto_goTypes = nil
	file_pipe_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RestClient is the client API for Rest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestClient interface {
	Get(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	Post(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type restClient struct {
	cc grpc.ClientConnInterface
}

func NewRestClient(cc grpc.ClientConnInterface) RestClient {
	return &restClient{cc}
}

func (c *restClient) Get(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/Rest/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restClient) Post(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Rest/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestServer is the server API for Rest service.
type RestServer interface {
	Get(context.Context, *anypb.Any) (*anypb.Any, error)
	Post(context.Context, *anypb.Any) (*emptypb.Empty, error)
}

// UnimplementedRestServer can be embedded to have forward compatible implementations.
type UnimplementedRestServer struct {
}

func (*UnimplementedRestServer) Get(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRestServer) Post(context.Context, *anypb.Any) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}

func RegisterRestServer(s *grpc.Server, srv RestServer) {
	s.RegisterService(&_Rest_serviceDesc, srv)
}

func _Rest_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rest/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestServer).Get(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rest_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rest/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestServer).Post(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rest",
	HandlerType: (*RestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Rest_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Rest_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipe.proto",
}

// KeepaliveClient is the client API for Keepalive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeepaliveClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (Keepalive_LinkClient, error)
}

type keepaliveClient struct {
	cc grpc.ClientConnInterface
}

func NewKeepaliveClient(cc grpc.ClientConnInterface) KeepaliveClient {
	return &keepaliveClient{cc}
}

func (c *keepaliveClient) Link(ctx context.Context, opts ...grpc.CallOption) (Keepalive_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Keepalive_serviceDesc.Streams[0], "/Keepalive/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &keepaliveLinkClient{stream}
	return x, nil
}

type Keepalive_LinkClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type keepaliveLinkClient struct {
	grpc.ClientStream
}

func (x *keepaliveLinkClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keepaliveLinkClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeepaliveServer is the server API for Keepalive service.
type KeepaliveServer interface {
	Link(Keepalive_LinkServer) error
}

// UnimplementedKeepaliveServer can be embedded to have forward compatible implementations.
type UnimplementedKeepaliveServer struct {
}

func (*UnimplementedKeepaliveServer) Link(Keepalive_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}

func RegisterKeepaliveServer(s *grpc.Server, srv KeepaliveServer) {
	s.RegisterService(&_Keepalive_serviceDesc, srv)
}

func _Keepalive_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeepaliveServer).Link(&keepaliveLinkServer{stream})
}

type Keepalive_LinkServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type keepaliveLinkServer struct {
	grpc.ServerStream
}

func (x *keepaliveLinkServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keepaliveLinkServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Keepalive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Keepalive",
	HandlerType: (*KeepaliveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _Keepalive_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pipe.proto",
}
